[彻底理解Java的Future模式](https://www.cnblogs.com/cz123/p/7693064.html)
这篇文章基本上把Future说清楚了，代码再走一下
CommonCook 的第一段代码可以通过thread.join()移动位置，打到和Future 执行顺序相同的效果，功能少点
Future 可以取消可以返回值
基本用法就是例子描述
接下来看相关jdk
FutureTask 其实也是runnable的接口 ，执行把Callable传进去当成函数执行，得到返回值
run()方法重点看    
unsfae.的操作
```
 public void run() {
        if (state != NEW || 
            !UNSAFE.compareAndSwapObject(this, runnerOffset,
                                         null, Thread.currentThread()))
            return;//构造函初始化后的状态不是NEW 或者    
            //!UNSAFE.compareAndSwapObject(this, runnerOffset,null, Thread.currentThread())) //这行什么意思this！=null 返回false  最后if结果是真啊？
        try {
            Callable<V> c = callable;
            if (c != null && state == NEW) {
                V result;
                boolean ran;
                try {
                    result = c.call(); //保存结果
                    ran = true;
                } catch (Throwable ex) {
                    result = null;
                    ran = false;
                    setException(ex); //存储了异常结果
                }
                if (ran)
                    set(result);
            }
        } finally {
            // runner must be non-null until state is settled to
            // prevent concurrent calls to run()
            runner = null;
            // state must be re-read after nulling runner to prevent
            // leaked interrupts
            int s = state;
            if (s >= INTERRUPTING)
                handlePossibleCancellationInterrupt(s);
        }
    }

```

阅读MINA 源代码前 基础不太好的同学还是要回顾下一些相关知识，毕竟多线程NIO也不是经常写
1. NIO 
2. JAVA的Future
3. JAVA的线程池模型
